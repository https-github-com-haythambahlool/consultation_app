import 'dart:convert';
import 'package:consultation_app/constant/const_Api.dart';
import 'package:consultation_app/model/TagsModel.dart';
import 'package:consultation_app/model/userModel.dart';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

class Auth extends ChangeNotifier {
  Autogenerated? token;
  User? user;
  Role? role;
  Map errorMessage = {};
  List<User> users = [];

  Future<bool> login(String _email, String _password) async {
    http.Response response = await http.post(Uri.parse(loginUrl), body: {
      'email': _email,
      'password': _password,
    });
    if (response.statusCode == 200) {
      var body = jsonDecode(response.body);
      user = User.fromJson(body['user']);
      token = Autogenerated.fromJson(body);
      role = Role.fromJson(body['user']['role']);
      notifyListeners();
      return true;
    } else {
      var body = jsonDecode(response.body);
      errorMessage = body;
      notifyListeners();
      return false;
    }
  }

  Future register(String email, String password, String username) async {
    http.Response response = await http.post(Uri.parse(registerUrl), body: {
      'password_confirmation': password,
      'email': email,
      'password': password,
      'name': username
    });
    if (response.statusCode == 200) {
      var body = jsonDecode(response.body);
      user = User.fromJson(body['user']);
      token = Autogenerated.fromJson(body);
      role = Role.fromJson(body['user']['role']);
      notifyListeners();
      return true;
    } else {
      var body = jsonDecode(response.body);
      errorMessage = body;
      notifyListeners();
      return false;
    }
    //   if (response.statusCode == 200) {
    //     var body = jsonDecode(response.body);
    //     User user = User.fromJson(body['user']);
    //     print('register email : ${user.email} , name : ${user.name}');
    //  }
  }

  Future getUser() async {
    http.Response response = await http.get(Uri.parse(userInfoUrl),
        headers: {'Authorization': 'Bearer ${token!.token!}'});
    print('user from token : ${response.body}');
    if (response.statusCode == 200) {
      var body = jsonDecode(response.body);
      user = User.fromJson(body['user']);
      token = Autogenerated.fromJson(body);
      role = Role.fromJson(body['user']['role']);
      notifyListeners();
      return 'Success';
    } else {
      return 'error!!';
    }
  }

//remove

  Future updateUser(name) async {
    http.Response response = await http.put(
      Uri.parse(updateUserUrl(id: user!.id!, name: name)),
      headers: {'Authorization': 'Bearer ${token!.token!}'},
    );

    print(
        'Status code ${response.statusCode}  response from update :${response.body},');
  }

  Future logout() async {
    http.Response response = await http.post(Uri.parse(logoutUrl),
        headers: {'Authorization': 'Bearer ${token!.token!}'});
    if (response.statusCode == 200) {
      return 'Log out ${user!.name}';
    } else {
      return 'error!!';
    }
  }

  Future getAllUsers() async {
    http.Response response = await http.get(Uri.parse(allUsersUrl),
        headers: {'Authorization': 'Bearer ${token!.token!}'});
    // print(response.body);
    if (response.statusCode == 200) {
      var body = jsonDecode(response.body);

      for (var user in body['users']) {
        user = User.fromJson(user);
        users.add(user);
      }
    } else {
      return 'error!!';
    }
  }

  Future createUser() async {
    http.Response response = await http.post(Uri.parse(allUsersUrl), headers: {
      'Authorization': 'Bearer ${token!.token!}'
    }, body: {
      'name': 'Som3a',
      'email': 'som3aa@gmail.com',
      'password': '123456',
      'password_confirmation': '123456',
      'role_id': '4'
    });
    print(
        'and status code : ${response.statusCode} ///// body : ${response.body} ');
  }

  Future getUserId() async {
    http.Response response = await http.get(Uri.parse(getUserIdUrl(10)),
        headers: {'Authorization': 'Bearer ${token!.token!}'});
    print(response.body);
  }

  Future deleteUser() async {
    http.Response response = await http.delete(
        Uri.parse(deleteUserUrl(user!.id!)),
        headers: {'Authorization': 'Bearer ${token!.token!}'});
    print(response.body);
  }

  Future changePassword(password) async {
    http.Response response = await http.post(
        Uri.parse(changePasswordUrl(user!.id!)),
        headers: {'Authorization': 'Bearer ${token!.token!}'},
        body: {'password': password, 'password_confirmation': password});

    if (response.statusCode == 200) {
      return 'Succes change password';
    } else {
      return 'error';
    }
  }

  Future changeRole(roleId) async {
    http.Response response = await http.put(Uri.parse(changeRoleUrl(user!.id!)),
        headers: {'Authorization': 'Bearer ${token!.token!}'},
        body: {'role_id': roleId});
    if (response.statusCode == 200) {
      return 'Success';
    } else {
      return 'error!!';
    }
  }

  Future getallRoles() async {
    http.Response response = await http.get(
      Uri.parse(getRoleUrl),
      headers: {'Authorization': 'Bearer ${token!.token!}'},
    );
    print('roles ${response.body}');
  }

// pending
  Future Search(int statusId) async {
    http.Response response = await http.get(
      Uri.parse(SearchUrl(10)),
      headers: {'Authorization': 'Bearer ${token!.token!}'},
    );
    print(response.body);
  }

  Future getAllSenders() async {
    http.Response response = await http.get(
      Uri.parse(getAllSenderUrl(false)),
      headers: {'Authorization': 'Bearer ${token!.token!}'},
    );
    print(response.body);
  }

  Future getSingleSender() async {
    http.Response response = await http.get(
      Uri.parse(getSingleSenderUrl(id: 2, value: false)),
      headers: {'Authorization': 'Bearer ${token!.token!}'},
    );
    print(response.body);
  }

  Future createSenders() async {
    http.Response response = await http.post(Uri.parse(createSenderUsrl),
        headers: {'Authorization': 'Bearer ${token!.token!}'},
        body: {'name': "ahmed", 'mobile': "0599421421", 'category_id': 1});

    print(response.body);
  }

//  body لل image مش عارف شو احط
  Future updateSenders() async {
    http.Response response =
        await http.put(Uri.parse(updateSendersUrl(user!.id!)), headers: {
      'Authorization': 'Bearer ${token!.token!}'
    }, body: {
      "name": "osama ahmed",
    });
    print(response.body);
  }

  Future deleteSenders() async {
    http.Response response = await http.delete(
        Uri.parse(deleteSenderUrl(user!.id!)),
        headers: {'Authorization': 'Bearer ${token!.token!}'});
    print(response.body);
  }
}
