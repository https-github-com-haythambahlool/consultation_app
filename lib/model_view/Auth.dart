import 'dart:convert';
import 'package:consultation_app/components/homeScreen/Tags.dart';
import 'package:consultation_app/constant/const_Api.dart';
import 'package:consultation_app/model/CategoryModel.dart';
import 'package:consultation_app/model/MailModel.dart';
import 'package:consultation_app/model/MailsModel.dart';
import 'package:consultation_app/model/TagsModel.dart';
import 'package:consultation_app/model/userModel.dart';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

class Auth extends ChangeNotifier {
  Autogenerated? token;
  User? user;
  Role? role;
  Map errorMessage = {};
  MailModel? mail;
  MailsModel? allMails;
  CategoryModel? categoryModel;
  Category? category;
  TagModel? tagsModel;
  Future<bool> login(String _email, String _password) async {
    http.Response response = await http.post(Uri.parse(loginUrl), body: {
      'email': _email,
      'password': _password,
    });
    if (response.statusCode == 200) {
      var body = jsonDecode(response.body);
      user = User.fromJson(body['user']);
      token = Autogenerated.fromJson(body);
      role = Role.fromJson(body['user']['role']);
      notifyListeners();
      return true;
    } else {
      var body = jsonDecode(response.body);
      errorMessage = body;
      notifyListeners();
      return false;
    }
  }

  Future register(String email, String password, String username) async {
    http.Response response = await http.post(Uri.parse(registerUrl), body: {
      'password_confirmation': password,
      'email': email,
      'password': password,
      'name': username
    });
    if (response.statusCode == 200) {
      var body = jsonDecode(response.body);
      user = User.fromJson(body['user']);
      token = Autogenerated.fromJson(body);
      role = Role.fromJson(body['user']['role']);
      notifyListeners();
      return true;
    } else {
      var body = jsonDecode(response.body);
      errorMessage = body;
      notifyListeners();
      return false;
    }
    //   if (response.statusCode == 200) {
    //     var body = jsonDecode(response.body);
    //     User user = User.fromJson(body['user']);
    //     print('register email : ${user.email} , name : ${user.name}');
    //  }
  }

  Future getUser() async {
    http.Response response = await http.get(Uri.parse(userInfoUrl),
        headers: {'Authorization': 'Bearer ${token!.token!}'});
    print('user from token : ${response.body}');
  }

//review 500 Internal Server Error

  Future updateUser() async {
    http.Response response = await http.put(
      Uri.parse(updateUserUrl(id: user!.id!, name: 'Som3a Jarada')),
      headers: {'Authorization': 'Bearer ${token!.token!}'},
    );

    print(
        'Status code ${response.statusCode}  response from update :${response.body},');
  }

  Future logout() async {
    http.Response response = await http.post(Uri.parse(logoutUrl),
        headers: {'Authorization': 'Bearer ${token!.token!}'});
    print(response.body);
  }

  Future getAllUsers() async {
    http.Response response = await http.get(Uri.parse(allUsersUrl),
        headers: {'Authorization': 'Bearer ${token!.token!}'});
    print(response.body);
  }

  Future createUser() async {
    http.Response response = await http.post(Uri.parse(allUsersUrl), headers: {
      'Authorization': 'Bearer ${token!.token!}'
    }, body: {
      'name': 'Som3a',
      'email': 'som3aa@gmail.com',
      'password': '123456',
      'password_confirmation': '123456',
      'role_id': '4'
    });
    print(
        'and status code : ${response.statusCode} ///// body : ${response.body} ');
  }

  Future getUserId() async {
    http.Response response = await http.get(Uri.parse(getUserIdUrl(10)),
        headers: {'Authorization': 'Bearer ${token!.token!}'});
    print(response.body);
  }

  Future deleteUser() async {
    http.Response response = await http.delete(
        Uri.parse(deleteUserUrl(user!.id!)),
        headers: {'Authorization': 'Bearer ${token!.token!}'});
    print(response.body);
  }

  Future changePassword() async {
    print('user : ${user!.id!}');
    http.Response response = await http.post(
        Uri.parse(changePasswordUrl(user!.id!)),
        headers: {'Authorization': 'Bearer ${token!.token!}'},
        body: {'password': '123456', 'password_confirmation': '123456'});
    print('change password ${response.statusCode} and ||| ${response.body}');
    if (response.statusCode == 200) {
      print(response.body);
    }
  }

  Future changeRole() async {
    http.Response response = await http.put(Uri.parse(changeRoleUrl(user!.id!)),
        headers: {'Authorization': 'Bearer ${token!.token!}'},
        body: {'role_id': '2'});
    print('role from : ${response.body}');
  }

  Future getMails() async {
    print('get mails');
    http.Response response = await http.get(Uri.parse(getMailsUrl),
        headers: {'Authorization': 'Bearer ${token!.token!}'});
    // print(response.body);
    if (response.statusCode == 200) {
      var body = jsonDecode(response.body);
      allMails = MailsModel.fromJson(body);
      print('get mails : ${allMails!.mails.mails[0].description}');
    }
    // print('get mails : ${response.body}');
  }

  Future getSingleMail(int id) async {
    http.Response response = await http.get(Uri.parse(getSingleMailUrl(id)),
        headers: {'Authorization': "Bearer ${token!.token!}"});
    print(response.body);
    if (response.statusCode == 200) {
      var body = jsonDecode(response.body);
      mail = MailModel.fromJson(body['mail'][0]);
      print('get mails : ${mail!.archiveNumber}');
    } else {
      print("getSingleMail : ${response.body}");
    }
  }

  Future createMail() async {
    Map<String, dynamic> body = {
      'subject': 'subject',
      'description': '',
      'decision': '',
      'final_decision': '',
      'sender_id': '1',
      'archive_number': '1252',
      'archive_date': DateTime.now().toString(),
      'status_id': '1',
      'tags': jsonEncode([1, 2]),
      'activities': jsonEncode([
        {'body': 'any text', 'user_id': 1},
        {'body': 'any text2', 'user_id': 1}
      ]),
    };

    http.Response response = await http.post(
      Uri.parse(createMailUrl),
      headers: {'Authorization': 'Bearer ${token!.token!}'},
      body: body,
    );
    print(
        'create mail : ${response.body} and status code : ${response.statusCode}');
    if (response.statusCode == 200) {
      dynamic body = jsonDecode(response.body);

      mail = MailModel.fromJson(body['mail']);
    }
  }

  Future updateMail() async {
    http.Response response =
        await http.put(Uri.parse(updateMailUrl(user!.id!)), headers: {
      'Authorization': 'Bearer ${token!.token!}'
    }, body: {
      'status_id': '1',
      'tags': jsonEncode([2, 3]),
      'activities': jsonEncode(
        [
          {"body": "any text", "user_id": 1},
          {"body": "any text2", "user_id": 1}
        ],
      ),
      'decision': 'new decisi',
      'final_decision': 'jdasjd',
      'idAttachmentsForDelete': jsonEncode([]),
      'pathAttachmentsForDelete': jsonEncode([])
    });
    print(
        'status code : ${response.statusCode} , ||||| body : ${response.body}');
  }

  Future deleteMail() async {
    http.Response response = await http.delete(
        Uri.parse(deleteMailUrl(mail!.id!)),
        headers: {'Authorization': 'Bearer ${token!.token!}'});
    if (response.statusCode == 200) {
      print('delete ${response.body}');
    }
  }

  Future getAllCategories() async {
    http.Response response = await http.get(Uri.parse(getAllcategoriesUrl),
        headers: {'Authorization': 'Bearer ${token!.token!}'});
    print("getAllCategories : ${response.body}");
  }

  Future getSingleCategores() async {
    http.Response response = await http.get(
        Uri.parse(getSinglecategoriesUrl(2)),
        headers: {'Authorization': 'Bearer ${token!.token!}'});
    if (response.statusCode == 200) {
      var body = jsonDecode(response.body);
      categoryModel = CategoryModel.fromJson(body);
      print('success data');
    }
  }

  Future createCategories() async {
    http.Response response = await http.post(Uri.parse(createCategoriesUrl),
        headers: {'Authorization': 'Bearer ${token!.token!}'},
        body: {'name': 'Som3a'});
    print("Create Categories:${response.body}");
    if (response.statusCode == 200) {
      var body = jsonDecode(response.body);
      category = Category.fromJson(body['category']);
      print('success');
    }
  }

  Future getAlltags() async {
    http.Response response = await http.get(
      Uri.parse(getAlltagsUrl),
      headers: {'Authorization': 'Bearer ${token!.token!}'},
    );
    if (response.statusCode == 200) {
      var body = jsonDecode(response.body);
      tagsModel = TagModel.fromJson(body);
    }
    print(response.body);
  }

  Future getAlltagsWithMail() async {
    http.Response response = await http.get(
      Uri.parse(getAlltagsWithMailUrl([1, 2])),
      headers: {'Authorization': 'Bearer ${token!.token!}'},
    );
    print(response.body);
  }

  Future getAlltagsOfMail() async {
    http.Response response = await http.get(Uri.parse(getAlltagsWithIdUrl(13)),
        headers: {'Authorization': 'Bearer ${token!.token!}'});
    print(response.body);
  }

  Future createtags() async {
    http.Response response = await http.post(Uri.parse(createtagsUrl),
        headers: {'Authorization': 'Bearer ${token!.token!}'},
        body: {'name': "ahmed"});
    print(response.body);
  }

  Future getALlStatus() async {
    http.Response response = await http.get(
      Uri.parse(getAllStutassUrl(true)),
      headers: {'Authorization': 'Bearer ${token!.token!}'},
    );
    print(response.body);
  }

  Future getSingleStatus() async {
    http.Response response = await http.get(
      Uri.parse(getSingleStatusUrl(statusId: 2, value: true)),
      headers: {'Authorization': 'Bearer ${token!.token!}'},
    );
    print(response.body);
  }

  Future getallRoles() async {
    http.Response response = await http.get(
      Uri.parse(getRoleUrl),
      headers: {'Authorization': 'Bearer ${token!.token!}'},
    );
    print('roles ${response.body}');
  }

// pending
  Future Search(int statusId) async {
    http.Response response = await http.get(
      Uri.parse(SearchUrl(10)),
      headers: {'Authorization': 'Bearer ${token!.token!}'},
    );
    print(response.body);
  }

  Future getAllSenders() async {
    http.Response response = await http.get(
      Uri.parse(getAllSenderUrl(false)),
      headers: {'Authorization': 'Bearer ${token!.token!}'},
    );
    print(response.body);
  }

  Future getSingleSender() async {
    http.Response response = await http.get(
      Uri.parse(getSingleSenderUrl(id: 2, value: false)),
      headers: {'Authorization': 'Bearer ${token!.token!}'},
    );
    print(response.body);
  }

  Future createSenders() async {
    http.Response response = await http.post(Uri.parse(createSenderUsrl),
        headers: {'Authorization': 'Bearer ${token!.token!}'},
        body: {'name': "ahmed", 'mobile': "0599421421", 'category_id': 1});

    print(response.body);
  }

//  body لل image مش عارف شو احط
  Future updateSenders() async {
    http.Response response =
        await http.put(Uri.parse(updateSendersUrl(user!.id!)), headers: {
      'Authorization': 'Bearer ${token!.token!}'
    }, body: {
      "name": "osama ahmed",
    });
    print(response.body);
  }

  Future deleteSenders() async {
    http.Response response = await http.delete(
        Uri.parse(deleteSenderUrl(user!.id!)),
        headers: {'Authorization': 'Bearer ${token!.token!}'});
    print(response.body);
  }
}
