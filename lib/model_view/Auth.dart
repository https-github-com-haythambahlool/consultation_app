import 'dart:convert';
import 'package:consultation_app/constant/const_Api.dart';
import 'package:consultation_app/model/userModel.dart';
import 'package:http/http.dart' as http;

class Auth {
  Autogenerated? token;
  User? user;
  Role? role;

  Future login(String _email, String _password) async {
    print('login');
    http.Response response = await http.post(Uri.parse(loginUrl), body: {
      'email': _email,
      'password': _password,
    });
    if (response.statusCode == 200) {
      var body = jsonDecode(response.body);
      user = User.fromJson(body['user']);
      token = Autogenerated.fromJson(body);
      role = Role.fromJson(body['user']['role']);
      print('token from login : ${token} and ${token!.token!}');
      print(' email : ${user!.email} , name : ${user!.name}');
      return user;
    }
  }

  Future register(String _email, String _password, String _username) async {
    print('register');
    http.Response response = await http.post(Uri.parse(registerUrl), body: {
      'password_confirmation': _password,
      'email': _email,
      'password': _password,
      'name': _username
    });

    print('after register ${response.body}');
    if (response.statusCode == 200) {
      var body = jsonDecode(response.body);
      User user = User.fromJson(body['user']);
      print('register email : ${user.email} , name : ${user.name}');
    }
  }

  Future getUser() async {
    http.Response response = await http.get(Uri.parse(userInfoUrl),
        headers: {'Authorization': 'Bearer ${token!.token!}'});
    print('user from token : ${response.body}');
  }

//review 500 Internal Server Error

  Future updateUser() async {
    http.Response response = await http.post(Uri.parse(updateUserUrl),
        headers: {'Authorization': 'Bearer ${token!.token!}'},
        body: {'name': 'Felfel'});
    print('response from update :${response.body},');
  }

  Future logout() async {
    http.Response response = await http.post(Uri.parse(logoutUrl),
        headers: {'Authorization': 'Bearer ${token!.token!}'});
    print(response.body);
  }

  Future getAllUsers() async {
    http.Response response = await http.get(Uri.parse(allUsersUrl),
        headers: {'Authorization': 'Bearer ${token!.token!}'});
    print(response.body);
  }

//review 500 Internal Server Error

  Future createUser() async {
    http.Response response = await http.post(Uri.parse(allUsersUrl), headers: {
      'Authorization': 'Bearer ${token!.token!}'
    }, body: {
      'name': 'Som3a',
      'email': 'som3a@gmail.com',
      'password': '123456'
    });
    print(response.body);
  }

  Future getUserId() async {
    http.Response response = await http.get(Uri.parse(getUserIdUrl(10)),
        headers: {'Authorization': 'Bearer ${token!.token!}'});
    print(response.body);
  }

  Future deleteUser() async {
    http.Response response = await http.delete(
        Uri.parse(deleteUserUrl(user!.id!)),
        headers: {'Authorization': 'Bearer ${token!.token!}'});
    print(response.body);
  }

//review 200 In PostMan 302 In VSCode
  Future changePassword() async {
    http.Response response = await http.put(
        Uri.parse(changePasswordUrl(user!.id!)),
        headers: {'Authorization': 'Bearer ${token!.token!}'},
        body: {'password': '12345678'});
    print('change password ${response.statusCode} and ||| ${response.body}');
    if (response.statusCode == 200) {
      print(response.body);
    }
  }

  Future changeRole() async {
    http.Response response = await http.put(Uri.parse(changeRoleUrl(user!.id!)),
        headers: {'Authorization': 'Bearer ${token!.token!}'},
        body: {'role_id': '2'});
    print('role from : ${response.body}');
  }

  Future getMails() async {
    http.Response response = await http.get(Uri.parse(getMailsUrl),
        headers: {'Authorization': 'Bearer ${token!.token!}'});
    print('get mails : ${response.body}');
  }

  Future getSingleMail(int id) async {
    http.Response response = await http.get(
        Uri.parse(getSingleMailUrl(user!.id!)),
        headers: {'Authorization': "Bearer ${token!.token!}"});
    print("getSingleMail : ${response.body[id]}");
  }

  // هان مش عارف بظهرش اشي

  // Future createMail() async {
  //   print('create');
  //   http.Response response =
  //       await http.post(Uri.parse(createMailUrl), headers: {
  //     'Authorization': 'Bearer ${token!.token!}'
  //   }, body: {
  //     'subject': "ffff",
  //     'sender_id': 1,
  //     'archive_number': "2000",
  //     'archive_date': 2023 - 10 - 20,
  //     'status_id': 1,
  //     'tags': [2, 3],
  //     'activities': [
  //       {"body": "any text", "user_id": 6},
  //       {"body": "any text2", "user_id": 5}
  //     ]
  //   });
  //   print(response.body);
  // }

  //       وهان كمان

  // Future updateMail() async {
  //   http.Response response = await http.put(Uri.parse(updateMailUrl(user!.id!)), headers: {
  //     'Authorization': 'Bearer ${token!.token!}'
  //   }, body: {
  //     'status_id': 1,
  //     'tags': [2, 3],
  //     'activities': [
  //       {"body": "any text", "user_id": 6},
  //       {"body": "any text2", "user_id": 5}
  //     ],
  //   });
  //   print(response.body);
  // }

  Future getSingleMailCopy() async {
    http.Response response = await http.delete(
        Uri.parse(deleteSingleMailCopyUrl(user!.id!)),
        headers: {'Authorization': 'Bearer ${token!.token!}'});
    print(response.body);
  }

  //
  // وهان
  // Future getAllCategories() async {
  //   http.Response response = await http.get(Uri.parse(getAllcategoriesUrl),
  //       headers: {'Authorization': 'Bearer ${token!.token!}'});
  //   print("getAllCategories : ${response.body}");
  // }

  Future getSingleCategores(int id) async {
    http.Response response = await http.get(Uri.parse(getSinglecategoriesUrl),
        headers: {'Authorization': 'Bearer ${token!.token!}'});
    print(response.body);
  }

  Future createCategories() async {
    http.Response response = await http.post(Uri.parse(createCategoriesUrl),
        headers: {'Authorization': 'Bearer ${token!.token!}'},
        body: {'name': 'Som3a'});
    print("Create Categories:${response.body}");
  }

  Future getAlltags() async {
    http.Response response = await http.get(
      Uri.parse(getAllcategoriesUrl),
      headers: {'Authorization': 'Bearer ${token!.token!}'},
    );
    print(response.body);
  }

  Future getAlltagsWithMail() async {
    http.Response response = await http.get(
      Uri.parse(getAlltagsWithMailUrl("o@o.com")),
      headers: {'Authorization': 'Bearer ${token!.token!}'},
    );
    print(response.body);
  }

  Future getAlltagsWithId() async {
    http.Response response = await http.get(Uri.parse(getAlltagsWithIdUrl(5)),
        headers: {'Authorization': 'Bearer ${token!.token!}'});
    print(response.body);
  }

  Future createtags() async {
    http.Response response = await http.post(Uri.parse(createtagsUrl),
        headers: {'Authorization': 'Bearer ${token!.token!}'},
        body: {'name': "ahmed"});
    print(response.body);
  }

  Future getALlStatus() async {
    http.Response response = await http.get(
      Uri.parse(getAllStutassUrl),
      headers: {'Authorization': 'Bearer ${token!.token!}'},
    );
    print(response.body);
  }

  Future getSingleStatus() async {
    http.Response response = await http.get(
      Uri.parse(getSingleStatusUrl),
      headers: {'Authorization': 'Bearer ${token!.token!}'},
    );
    print(response.body);
  }

  Future getRole() async {
    http.Response response = await http.get(
      Uri.parse(getRoleUrl),
      headers: {'Authorization': 'Bearer ${token!.token!}'},
    );
  }

  Future Search(int id) async {
    http.Response response = await http.get(
      Uri.parse(SearchUrl(10)),
      headers: {'Authorization': 'Bearer ${token!.token!}'},
    );
    print(response.body);
  }

  Future getAllSenders() async {
    http.Response response = await http.get(
      Uri.parse(getAllSenderUrl),
      headers: {'Authorization': 'Bearer ${token!.token!}'},
    );
    print(response.body);
  }

  Future getSingleSenders() async {
    http.Response response = await http.get(
      Uri.parse(getSingleSenderUrl),
      headers: {'Authorization': 'Bearer ${token!.token!}'},
    );
    print(response.body);
  }

  Future createSenders() async {
    http.Response response = await http.post(Uri.parse(createSenderUsrl),
        headers: {'Authorization': 'Bearer ${token!.token!}'},
        body: {'name': "ahmed", 'mobile': "0599421421", 'category_id': 1});

    print(response.body);
  }

//  body لل image مش عارف شو احط
  Future updateSenders() async {
    http.Response response =
        await http.put(Uri.parse(updateSendersUrl(user!.id!)), headers: {
      'Authorization': 'Bearer ${token!.token!}'
    }, body: {
      "name": "osama ahmed",
    });
    print(response.body);
  }

  Future deleteSenders() async {
    http.Response response = await http.delete(
        Uri.parse(deleteSenderUrl(user!.id!)),
        headers: {'Authorization': 'Bearer ${token!.token!}'});
    print(response.body);
  }
}
